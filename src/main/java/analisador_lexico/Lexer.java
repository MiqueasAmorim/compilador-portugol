/* The following code was generated by JFlex 1.6.1 */

package analisador_lexico;

import model.Token;
import model.TokenModel;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Jefferson/Desktop/Nova pasta/compilador-portugol/src/main/java/analisador_lexico/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\20\1\21\1\21\1\20\22\0\1\4\6\0\1\1"+
    "\1\14\1\16\1\15\1\25\1\22\1\26\1\11\1\17\1\10\11\6"+
    "\1\23\1\24\1\35\1\34\1\36\2\0\32\5\1\0\1\3\2\0"+
    "\1\5\1\0\1\33\1\54\1\44\1\55\1\27\1\45\1\41\1\53"+
    "\1\43\2\5\1\47\1\42\1\32\1\30\1\37\1\52\1\40\1\50"+
    "\1\51\1\31\1\46\4\5\1\12\1\7\1\13\7\0\1\21\u1fa2\0"+
    "\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\3\4\1\21\1\22\1\23\13\4\1\0"+
    "\1\24\1\0\1\1\1\0\1\1\1\0\1\3\1\0"+
    "\1\3\1\25\2\4\1\26\2\4\1\27\1\30\1\31"+
    "\15\4\1\32\3\4\1\33\1\34\1\35\1\0\3\4"+
    "\1\36\1\37\15\4\1\40\10\4\1\3\3\4\1\41"+
    "\1\42\2\4\1\43\6\4\1\44\1\45\1\4\1\46"+
    "\4\4\1\47\4\4\1\50\5\4\1\51\5\4\1\52"+
    "\1\4\1\53\1\4\1\54\7\4\1\55\1\56\3\4"+
    "\1\57\2\4\1\60\3\4\1\61\2\4\1\62\6\4"+
    "\1\63\1\64\2\4\1\65\1\4\1\66\1\4\1\67"+
    "\1\4\1\70\1\4\1\71\1\4\1\72\1\4\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\56\0\212\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\56\0\56\0\u019e\0\56\0\u01cc\0\56"+
    "\0\56\0\56\0\u01fa\0\u0228\0\u0256\0\u0284\0\56\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\56\0\u0536\0\u0564"+
    "\0\346\0\u0114\0\u0142\0\u0142\0\u0592\0\u05c0\0\56\0\u05ee"+
    "\0\u061c\0\212\0\u064a\0\u0678\0\56\0\56\0\56\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\212\0\56\0\u0564\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\212"+
    "\0\212\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\212\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0592"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\212\0\212\0\u0ebc\0\u0eea\0\212"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\212\0\212"+
    "\0\u102c\0\212\0\u105a\0\u1088\0\u10b6\0\u10e4\0\212\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\212\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\212\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\212"+
    "\0\u1396\0\212\0\u13c4\0\212\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u14d8\0\u1506\0\212\0\212\0\u1534\0\u1562\0\u1590"+
    "\0\212\0\u15be\0\u15ec\0\212\0\u161a\0\u1648\0\u1676\0\212"+
    "\0\u16a4\0\u16d2\0\212\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\212\0\212\0\u1814\0\u1842\0\212\0\u1870\0\212"+
    "\0\u189e\0\212\0\u18cc\0\212\0\u18fa\0\212\0\u1928\0\212"+
    "\0\u1956\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\4\1\0\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\5\1\42\1\5\1\43\1\44\56\0\1\45\1\46"+
    "\1\47\1\0\14\45\1\47\35\45\5\0\4\5\16\0"+
    "\5\5\3\0\17\5\6\0\1\6\1\0\1\6\1\50"+
    "\52\0\1\51\1\0\1\51\1\50\52\0\1\52\1\0"+
    "\1\52\45\0\13\53\1\54\42\53\15\0\1\55\57\0"+
    "\1\56\72\0\1\57\26\0\4\5\16\0\3\5\1\60"+
    "\1\5\3\0\11\5\1\61\5\5\5\0\4\5\16\0"+
    "\2\5\1\62\2\5\3\0\17\5\5\0\4\5\16\0"+
    "\4\5\1\63\3\0\17\5\5\0\4\5\16\0\5\5"+
    "\3\0\12\5\1\64\4\5\34\0\1\65\1\0\1\66"+
    "\53\0\1\67\26\0\4\5\16\0\4\5\1\70\3\0"+
    "\1\5\1\71\15\5\5\0\4\5\16\0\1\72\4\5"+
    "\3\0\17\5\5\0\4\5\16\0\3\5\1\73\1\5"+
    "\3\0\17\5\5\0\4\5\16\0\1\5\1\74\2\5"+
    "\1\75\3\0\14\5\1\76\2\5\5\0\4\5\16\0"+
    "\2\5\1\77\1\5\1\100\3\0\4\5\1\101\12\5"+
    "\5\0\4\5\16\0\1\102\3\5\1\103\3\0\17\5"+
    "\5\0\4\5\16\0\1\104\4\5\3\0\17\5\5\0"+
    "\4\5\16\0\1\105\4\5\3\0\12\5\1\106\4\5"+
    "\5\0\4\5\16\0\2\5\1\107\2\5\3\0\17\5"+
    "\5\0\4\5\16\0\1\5\1\110\3\5\3\0\17\5"+
    "\5\0\4\5\16\0\1\111\4\5\3\0\17\5\1\47"+
    "\1\112\1\47\1\0\53\47\1\46\1\47\1\0\52\47"+
    "\6\0\1\113\1\0\1\113\45\0\15\55\1\114\40\55"+
    "\20\56\2\0\34\56\5\0\4\5\16\0\5\5\3\0"+
    "\12\5\1\115\1\116\3\5\5\0\4\5\16\0\5\5"+
    "\3\0\5\5\1\117\11\5\5\0\4\5\16\0\1\5"+
    "\1\120\3\5\3\0\17\5\5\0\4\5\16\0\1\121"+
    "\4\5\3\0\17\5\5\0\4\5\16\0\5\5\3\0"+
    "\1\5\1\122\15\5\5\0\4\5\16\0\1\5\1\123"+
    "\3\5\3\0\17\5\5\0\4\5\16\0\4\5\1\124"+
    "\3\0\1\125\10\5\1\126\5\5\5\0\4\5\16\0"+
    "\5\5\3\0\4\5\1\127\5\5\1\130\4\5\5\0"+
    "\4\5\16\0\3\5\1\131\1\5\3\0\17\5\5\0"+
    "\4\5\16\0\5\5\3\0\11\5\1\132\5\5\5\0"+
    "\4\5\16\0\4\5\1\133\3\0\17\5\5\0\4\5"+
    "\16\0\3\5\1\134\1\5\3\0\17\5\5\0\4\5"+
    "\16\0\5\5\3\0\5\5\1\135\2\5\1\136\6\5"+
    "\5\0\4\5\16\0\5\5\3\0\3\5\1\137\13\5"+
    "\5\0\4\5\16\0\5\5\3\0\1\5\1\140\10\5"+
    "\1\141\4\5\5\0\4\5\16\0\5\5\3\0\1\5"+
    "\1\142\15\5\5\0\4\5\16\0\5\5\3\0\4\5"+
    "\1\143\12\5\5\0\4\5\16\0\3\5\1\144\1\5"+
    "\3\0\17\5\5\0\4\5\16\0\5\5\3\0\1\5"+
    "\1\145\15\5\5\0\4\5\16\0\1\5\1\146\3\5"+
    "\3\0\17\5\5\0\4\5\16\0\1\5\1\147\3\5"+
    "\3\0\17\5\15\55\1\114\1\150\37\55\5\0\4\5"+
    "\16\0\4\5\1\151\3\0\17\5\5\0\4\5\16\0"+
    "\2\5\1\152\2\5\3\0\17\5\5\0\4\5\16\0"+
    "\5\5\3\0\1\5\1\153\15\5\5\0\4\5\16\0"+
    "\1\154\3\5\1\155\3\0\17\5\5\0\4\5\16\0"+
    "\5\5\3\0\2\5\1\156\2\5\1\157\11\5\5\0"+
    "\4\5\16\0\5\5\3\0\10\5\1\160\6\5\5\0"+
    "\4\5\16\0\5\5\3\0\4\5\1\161\12\5\5\0"+
    "\4\5\16\0\5\5\3\0\12\5\1\162\4\5\5\0"+
    "\4\5\16\0\5\5\3\0\5\5\1\163\11\5\5\0"+
    "\4\5\16\0\1\164\4\5\3\0\17\5\5\0\4\5"+
    "\16\0\5\5\3\0\11\5\1\165\1\166\4\5\5\0"+
    "\4\5\16\0\1\5\1\167\3\5\3\0\17\5\5\0"+
    "\4\5\16\0\5\5\3\0\1\5\1\170\15\5\5\0"+
    "\4\5\16\0\5\5\3\0\5\5\1\171\11\5\5\0"+
    "\4\5\16\0\4\5\1\172\3\0\17\5\5\0\4\5"+
    "\16\0\5\5\3\0\11\5\1\173\5\5\5\0\4\5"+
    "\16\0\5\5\3\0\16\5\1\174\5\0\4\5\16\0"+
    "\1\5\1\175\3\5\3\0\17\5\5\0\4\5\16\0"+
    "\5\5\3\0\4\5\1\176\12\5\5\0\4\5\16\0"+
    "\4\5\1\177\3\0\17\5\5\0\4\5\16\0\4\5"+
    "\1\200\3\0\17\5\5\0\4\5\16\0\5\5\3\0"+
    "\4\5\1\201\12\5\5\0\4\5\16\0\5\5\3\0"+
    "\5\5\1\202\11\5\5\0\4\5\16\0\5\5\3\0"+
    "\10\5\1\203\6\5\5\0\4\5\16\0\1\5\1\204"+
    "\3\5\3\0\17\5\5\0\4\5\16\0\4\5\1\205"+
    "\3\0\17\5\5\0\4\5\16\0\1\206\4\5\3\0"+
    "\17\5\5\0\4\5\16\0\5\5\3\0\1\5\1\207"+
    "\15\5\5\0\4\5\16\0\1\210\4\5\3\0\17\5"+
    "\5\0\4\5\16\0\5\5\3\0\12\5\1\211\4\5"+
    "\5\0\4\5\16\0\1\5\1\212\3\5\3\0\17\5"+
    "\5\0\4\5\16\0\5\5\3\0\4\5\1\213\12\5"+
    "\5\0\4\5\16\0\5\5\3\0\4\5\1\214\12\5"+
    "\5\0\4\5\16\0\5\5\3\0\12\5\1\215\4\5"+
    "\5\0\4\5\16\0\5\5\3\0\4\5\1\216\12\5"+
    "\5\0\4\5\16\0\4\5\1\217\3\0\17\5\5\0"+
    "\4\5\16\0\1\5\1\220\3\5\3\0\17\5\5\0"+
    "\4\5\16\0\4\5\1\221\3\0\17\5\5\0\4\5"+
    "\16\0\5\5\3\0\1\5\1\222\15\5\5\0\4\5"+
    "\16\0\4\5\1\223\3\0\17\5\5\0\4\5\16\0"+
    "\1\5\1\224\3\5\3\0\17\5\5\0\4\5\16\0"+
    "\3\5\1\225\1\5\3\0\17\5\5\0\4\5\16\0"+
    "\5\5\3\0\4\5\1\226\12\5\5\0\4\5\16\0"+
    "\1\227\4\5\3\0\17\5\5\0\4\5\16\0\3\5"+
    "\1\230\1\5\3\0\17\5\5\0\4\5\16\0\5\5"+
    "\3\0\7\5\1\231\7\5\5\0\4\5\16\0\4\5"+
    "\1\232\3\0\17\5\5\0\4\5\16\0\5\5\3\0"+
    "\16\5\1\233\5\0\4\5\16\0\4\5\1\234\3\0"+
    "\17\5\5\0\4\5\16\0\1\5\1\235\3\5\3\0"+
    "\17\5\5\0\4\5\16\0\5\5\3\0\1\5\1\236"+
    "\15\5\5\0\4\5\16\0\4\5\1\237\3\0\17\5"+
    "\5\0\4\5\16\0\3\5\1\240\1\5\3\0\17\5"+
    "\5\0\4\5\16\0\1\5\1\241\3\5\3\0\17\5"+
    "\5\0\4\5\16\0\5\5\3\0\16\5\1\242\5\0"+
    "\4\5\16\0\5\5\3\0\7\5\1\243\7\5\5\0"+
    "\4\5\16\0\5\5\3\0\2\5\1\244\14\5\5\0"+
    "\4\5\16\0\1\245\4\5\3\0\17\5\5\0\4\5"+
    "\16\0\4\5\1\246\3\0\17\5\5\0\4\5\16\0"+
    "\5\5\3\0\12\5\1\247\4\5\5\0\4\5\16\0"+
    "\4\5\1\250\3\0\17\5\5\0\4\5\16\0\5\5"+
    "\3\0\3\5\1\251\13\5\5\0\4\5\16\0\5\5"+
    "\3\0\4\5\1\252\12\5\5\0\4\5\16\0\1\5"+
    "\1\253\3\5\3\0\17\5\5\0\4\5\16\0\3\5"+
    "\1\254\1\5\3\0\17\5\5\0\4\5\16\0\2\5"+
    "\1\255\2\5\3\0\17\5\5\0\4\5\16\0\1\256"+
    "\4\5\3\0\17\5\5\0\4\5\16\0\1\257\4\5"+
    "\3\0\17\5\5\0\4\5\16\0\3\5\1\260\1\5"+
    "\3\0\17\5\5\0\4\5\16\0\3\5\1\261\1\5"+
    "\3\0\17\5\5\0\4\5\16\0\1\5\1\262\3\5"+
    "\3\0\17\5\5\0\4\5\16\0\4\5\1\263\3\0"+
    "\17\5\5\0\4\5\16\0\5\5\3\0\3\5\1\264"+
    "\13\5\5\0\4\5\16\0\5\5\3\0\12\5\1\265"+
    "\4\5\5\0\4\5\16\0\4\5\1\266\3\0\17\5"+
    "\5\0\4\5\16\0\5\5\3\0\4\5\1\267\12\5"+
    "\5\0\4\5\16\0\5\5\3\0\10\5\1\270\6\5"+
    "\5\0\4\5\16\0\5\5\3\0\12\5\1\271\4\5"+
    "\5\0\4\5\16\0\1\5\1\272\3\5\3\0\17\5"+
    "\5\0\4\5\16\0\1\273\4\5\3\0\17\5\5\0"+
    "\4\5\16\0\1\274\4\5\3\0\17\5\5\0\4\5"+
    "\16\0\5\5\3\0\1\5\1\275\15\5\5\0\4\5"+
    "\16\0\1\276\4\5\3\0\17\5\5\0\4\5\16\0"+
    "\3\5\1\277\1\5\3\0\17\5\5\0\4\5\16\0"+
    "\1\5\1\300\3\5\3\0\17\5\5\0\4\5\16\0"+
    "\5\5\3\0\12\5\1\301\4\5\5\0\4\5\16\0"+
    "\1\5\1\302\3\5\3\0\17\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\2\11\1\1\1\11"+
    "\1\1\3\11\4\1\1\11\15\1\1\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\5\1\3\11\22\1\1\11\1\1\1\0\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private int id = 0;

private TokenModel createToken(int id, Token nome) {
    return new TokenModel(id, nome, yytext(), yyline+1, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenModel yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return createToken(-1, Token.ERRO);
            }
          case 60: break;
          case 2: 
            { id+=1; return createToken(id, Token.ASPAS_SIMPLES);
            }
          case 61: break;
          case 3: 
            { /**/
            }
          case 62: break;
          case 4: 
            { if (yylength() > 10) 
        return createToken(-1, Token.ERRO); 
    id+=1; 
    return createToken(id, Token.IDENTIFICADOR);
            }
          case 63: break;
          case 5: 
            { id+=1; return createToken(id, Token.INTEIRO);
            }
          case 64: break;
          case 6: 
            { id+=1; return createToken(id, Token.PONTO);
            }
          case 65: break;
          case 7: 
            { id+=1; return createToken(id, Token.ABRE_PARENTESES);
            }
          case 66: break;
          case 8: 
            { id+=1; return createToken(id, Token.OP_MULTIPLICACAO);
            }
          case 67: break;
          case 9: 
            { id+=1; return createToken(id, Token.FECHA_PARENTESES);
            }
          case 68: break;
          case 10: 
            { id+=1; return createToken(id, Token.OP_DIVISAO);
            }
          case 69: break;
          case 11: 
            { id+=1; return createToken(id, Token.VIRGULA);
            }
          case 70: break;
          case 12: 
            { id+=1; return createToken(id, Token.DOIS_PONTOS);
            }
          case 71: break;
          case 13: 
            { id+=1; return createToken(id, Token.PONTO_VIRGULA);
            }
          case 72: break;
          case 14: 
            { id+=1; return createToken(id, Token.OP_ADICAO);
            }
          case 73: break;
          case 15: 
            { id+=1; return createToken(id, Token.OP_SUBTRACAO);
            }
          case 74: break;
          case 16: 
            { id+=1; return createToken(id, Token.OP_E);
            }
          case 75: break;
          case 17: 
            { id+=1; return createToken(id, Token.OP_IGUAL);
            }
          case 76: break;
          case 18: 
            { id+=1; return createToken(id, Token.OP_MENOR);
            }
          case 77: break;
          case 19: 
            { id+=1; return createToken(id, Token.OP_MAIOR);
            }
          case 78: break;
          case 20: 
            { id+=1; return createToken(id, Token.STRING);
            }
          case 79: break;
          case 21: 
            { id+=1; return createToken(id, Token.OP_ATRIBUICAO);
            }
          case 80: break;
          case 22: 
            { id+=1; return createToken(id, Token.OP_OU);
            }
          case 81: break;
          case 23: 
            { id+=1; return createToken(id, Token.OP_MENOR_IGUAL);
            }
          case 82: break;
          case 24: 
            { id+=1; return createToken(id, Token.OP_DIFERENTE);
            }
          case 83: break;
          case 25: 
            { id+=1; return createToken(id, Token.OP_MAIOR_IGUAL);
            }
          case 84: break;
          case 26: 
            { id+=1; return createToken(id, Token.PC_SE);
            }
          case 85: break;
          case 27: 
            { id+=1; return createToken(id, Token.PC_DE);
            }
          case 86: break;
          case 28: 
            { id+=1; return createToken(id, Token.CARACTERE);
            }
          case 87: break;
          case 29: 
            { id+=1; return createToken(id, Token.REAL);
            }
          case 88: break;
          case 30: 
            { id+=1; return createToken(id, Token.OP_NAO);
            }
          case 89: break;
          case 31: 
            { id+=1; return createToken(id, Token.PC_ATE);
            }
          case 90: break;
          case 32: 
            { id+=1; return createToken(id, Token.PC_FIM);
            }
          case 91: break;
          case 33: 
            { id+=1; return createToken(id, Token.PC_PARE);
            }
          case 92: break;
          case 34: 
            { id+=1; return createToken(id, Token.PC_PARA);
            }
          case 93: break;
          case 35: 
            { id+=1; return createToken(id, Token.PC_REAL);
            }
          case 94: break;
          case 36: 
            { id+=1; return createToken(id, Token.PC_CASO);
            }
          case 95: break;
          case 37: 
            { id+=1; return createToken(id, Token.PC_CHAR);
            }
          case 96: break;
          case 38: 
            { id+=1; return createToken(id, Token.PC_FACA);
            }
          case 97: break;
          case 39: 
            { id+=1; return createToken(id, Token.PC_LEIA);
            }
          case 98: break;
          case 40: 
            { id+=1; return createToken(id, Token.PC_ENTAO);
            }
          case 99: break;
          case 41: 
            { id+=1; return createToken(id, Token.PC_RESTO);
            }
          case 100: break;
          case 42: 
            { id+=1; return createToken(id, Token.PC_FALSO);
            }
          case 101: break;
          case 43: 
            { id+=1; return createToken(id, Token.PC_VETOR);
            }
          case 102: break;
          case 44: 
            { id+=1; return createToken(id, Token.PC_SENAO);
            }
          case 103: break;
          case 45: 
            { id+=1; return createToken(id, Token.PC_REPITA);
            }
          case 104: break;
          case 46: 
            { id+=1; return createToken(id, Token.PC_INICIO);
            }
          case 105: break;
          case 47: 
            { id+=1; return createToken(id, Token.PC_FUNCAO);
            }
          case 106: break;
          case 48: 
            { id+=1; return createToken(id, Token.PC_STRING);
            }
          case 107: break;
          case 49: 
            { id+=1; return createToken(id, Token.PC_ESCREVA);
            }
          case 108: break;
          case 50: 
            { id+=1; return createToken(id, Token.PC_INTEIRO);
            }
          case 109: break;
          case 51: 
            { id+=1; return createToken(id, Token.PC_ENQUANTO);
            }
          case 110: break;
          case 52: 
            { id+=1; return createToken(id, Token.PC_PROGRAMA);
            }
          case 111: break;
          case 53: 
            { id+=1; return createToken(id, Token.PC_CONTINUA);
            }
          case 112: break;
          case 54: 
            { id+=1; return createToken(id, Token.PC_VARIAVEL);
            }
          case 113: break;
          case 55: 
            { id+=1; return createToken(id, Token.PC_BOOLEANO);
            }
          case 114: break;
          case 56: 
            { id+=1; return createToken(id, Token.PC_CONSTANTE);
            }
          case 115: break;
          case 57: 
            { id+=1; return createToken(id, Token.PC_QUOCIENTE);
            }
          case 116: break;
          case 58: 
            { id+=1; return createToken(id, Token.PC_VERDADEIRO);
            }
          case 117: break;
          case 59: 
            { id+=1; return createToken(id, Token.PC_PROCEDIMENTO);
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
